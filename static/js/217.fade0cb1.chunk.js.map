{"version":3,"file":"static/js/217.fade0cb1.chunk.js","mappings":"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","sources":["api/getApi.js","components/moviedetails/MovieDetails.styled.js","components/moviedetails/MovieDetails.jsx"],"sourcesContent":[" import axios from \"axios\";\n const BASE_URL=\"https://api.themoviedb.org/3/\";\n export const BASE_IMG_URL=\"https://image.tmdb.org/t/p/w220_and_h330_face/\";\n const API_KEY=\"?api_key=68bc8f2587d307cdd95fbf9f8320ddc0\";\n\n export const fetchTrending = () =>{\n    return axios.get(`${BASE_URL}/trending/movie/week${API_KEY}`)\n };\n export const fetchMovieByName = (query) =>{\n    return axios.get(`${BASE_URL}search/movie${API_KEY}&query=${query}`)\n }\n export const fetchDetailedById = (id) =>{\n    return axios.get(`${BASE_URL}movie/${id}${API_KEY}`)\n }\n export const fetchReviewsById = (id) =>{\n    return axios.get(`${BASE_URL}movie/${id}/reviews${API_KEY}`)\n }\n export const fetchCastById = (id) =>{\n    return axios.get(`${BASE_URL}movie/${id}/credits${API_KEY}`)\n }","import styled from 'styled-components';\nimport { NavLink, Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\nexport const MovieDetailsWrap = styled.div`\n  display: flex;\n  gap: 15px;\n`;\nexport const Description = styled.p`\n& > span{\n  font-weight: 600;\n  font-size: 22px;\n  color: blue;\n\n}\n  font-size: 20px;\n`;\n\nexport const MoviePoster = styled.img`\n  object-fit: cover;\n  max-height: 100%;\n  max-width: 100%;\n  border-radius: 10px;\n  box-shadow: rgb(3, 37, 65) 0px 0px 4px 2px;\n  align-self: center;\n  margin-right: 20px;\n`;\nexport const StyledLink = styled(Link)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: white;\n  font-weight: 500;\n  background-color: rgb(3, 37, 65);\n`;\nexport const StyledNavLink = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: white;\n  font-weight: 500;\n  background-color: rgb(3, 37, 65);\n\n  &.active {\n    color: white;\n    background-color: orangered;\n  }\n`;\nexport const List = styled.ul`\n  display: flex;\n  gap: 10px;\n  list-style-type: none;\n`;\nexport const GenresText=styled.p`\nfont-weight: 600;\nfont-size: 22px;\ncolor: blue;\n`","import { fetchDetailedById, BASE_IMG_URL } from 'api/getApi';\nimport { useEffect, useState, Suspense } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { PAGE_NAMES } from 'router/paths';\nimport {\n  StyledLink,\n  StyledNavLink,\n  List,\n  Container,\n  MovieDetailsWrap,\n  Description,\n  MoviePoster,\n  GenresText,\n} from './MovieDetails.styled';\nimport noImagePoster from '../../images/no_image_poster.png';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [status, setStatus] = useState('idle');\n  const location = useLocation();\n  const getBack = location.state?.from ?? PAGE_NAMES.home;\n  useEffect(() => {\n    setIsLoading(true);\n    setStatus('loading');\n    fetchDetailedById(id)\n      .then(({ data }) => {\n        setMovie(data);\n        setStatus('fulfilled');\n      })\n      .catch(error => {\n        setStatus('error');\n        console.log(error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [id]);\n\n  if (status === 'idle' || isLoading) {\n    return <>Loading...</>;\n  }\n  if (status === 'error') {\n    return <>Occured an error</>;\n  }\n  const { backdrop_path, title, genres, vote_average, overview,release_date } = movie;\n  const genresString = genres\n    .map(item => {\n      return item.name;\n    })\n    .join(' ');\n    const releaseYear=new Date(release_date).getFullYear()?? '';\n  return (\n    <Container>\n      <div>\n        <StyledLink to={getBack}>Go back</StyledLink>\n      </div>\n      <MovieDetailsWrap>\n        <MoviePoster\n          src={\n            backdrop_path != null ? BASE_IMG_URL + backdrop_path : noImagePoster\n          }\n          alt={title}\n        />\n        <div>\n          <h2>{title} ({releaseYear})</h2>\n          <Description>\n            User score: <span>{Math.round(vote_average * 10)}%</span>\n          </Description>\n          <h3>Overview</h3>\n          <Description>{overview}</Description>\n          <h3>Genres</h3>\n          <GenresText>{genresString ?? 'Genres are not available'}</GenresText>\n        </div>\n      </MovieDetailsWrap>\n\n      <div>\n        <h3>Additional information</h3>\n        <List>\n          <li>\n            <StyledNavLink\n              to={PAGE_NAMES.cast}\n              replace\n              state={{ from: getBack }}\n            >\n              Cast\n            </StyledNavLink>\n          </li>\n          <li>\n            <StyledNavLink\n              to={PAGE_NAMES.reviews}\n              replace\n              state={{ from: getBack }}\n            >\n              Reviews\n            </StyledNavLink>\n          </li>\n          <li>\n            <StyledLink to=\"\" replace state={{ from: getBack }}>\n              Hide All\n            </StyledLink>\n          </li>\n        </List>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </Container>\n  );\n};\nexport default MovieDetails;\n"],"names":["BASE_URL","BASE_IMG_URL","API_KEY","fetchTrending","axios","fetchMovieByName","query","fetchDetailedById","id","fetchReviewsById","fetchCastById","Container","styled","MovieDetailsWrap","Description","MoviePoster","StyledLink","Link","StyledNavLink","NavLink","List","GenresText","useParams","useState","movie","setMovie","isLoading","setIsLoading","status","setStatus","getBack","useLocation","state","from","PAGE_NAMES","useEffect","then","data","catch","error","console","log","finally","backdrop_path","title","genres","vote_average","overview","release_date","genresString","map","item","name","join","releaseYear","Date","getFullYear","to","src","noImagePoster","alt","Math","round","replace","Suspense","fallback"],"sourceRoot":""}