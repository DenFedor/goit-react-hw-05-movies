{"version":3,"file":"static/js/134.3cf9cf95.chunk.js","mappings":"4SACOA,EAAS,gCACFC,EAAa,iDACpBC,EAAQ,4CAEDC,EAAgB,WAC1B,OAAOC,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,+BAA4CE,GACrD,EACYG,EAAmB,SAACC,GAC9B,OAAOF,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,uBAAoCE,EAApC,kBAAqDI,GAC9D,EACYC,EAAoB,SAACC,GAC/B,OAAOJ,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BQ,GAA9B,OAAmCN,GAC5C,EACYO,EAAmB,SAACD,GAC9B,OAAOJ,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BQ,EAA9B,mBAA2CN,GACpD,EACYQ,EAAgB,SAACF,GAC3B,OAAOJ,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BQ,EAA9B,mBAA2CN,GACpD,C,6ICfWS,EAAS,WACpB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMX,EAAQO,EAAaK,IAAI,SAC/B,GAA4BH,EAAAA,EAAAA,UAAS,QAArC,eAAOI,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACM,KAAVjB,GAAyB,MAATA,IACpBc,EAAU,YACVf,EAAAA,EAAAA,IAAiBC,GACdkB,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPR,EAAUQ,EAAKC,SACfN,EAAU,YACX,IACAO,OAAM,SAAAC,GACLR,EAAU,SACVS,QAAQC,IAAIF,EACb,IACAG,SAAQ,WACR,IACJ,GAAE,CAACzB,IAeJ,MAAe,UAAXa,GACK,oDAGP,iCACE,kBAAMa,KAAK,SAASC,SAlBH,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAGTC,EAFYF,EAAKG,SAASC,MAAMC,MAGnCC,MAAM,KACNC,QAAO,SAAAT,GAAC,OAAIA,CAAJ,IACRU,KAAK,KACR9B,EAAgB,CAAER,MAAOgC,IACzBF,EAAKS,OACN,EAOG,WACE,kBACEC,KAAK,QACLd,KAAK,OACLe,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,UAAQ,KAEV,2CAIF,8BACE,wBACGlC,EAAOmC,KAAI,YAAoC,IAAjC3C,EAAgC,EAAhCA,GAAI4C,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,eACxB,OACE,yBACE,SAAC,KAAD,CAAMC,IAAIC,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,GAAe,CAAEhD,GAAIA,IAAOiD,MAAO,CAAEC,KAAMrC,GAAlE,gBACG+B,QADH,IACGA,EAAAA,EAASC,KAFL7C,EAMZ,UAOV,EACD,W","sources":["api/getApi.js","pages/Movies.jsx"],"sourcesContent":[" import axios from \"axios\";\n const BASE_URL=\"https://api.themoviedb.org/3/\";\n export const BASE_IMG_URL=\"https://image.tmdb.org/t/p/w220_and_h330_face/\";\n const API_KEY=\"?api_key=68bc8f2587d307cdd95fbf9f8320ddc0\";\n\n export const fetchTrending = () =>{\n    return axios.get(`${BASE_URL}/trending/movie/week${API_KEY}`)\n };\n export const fetchMovieByName = (query) =>{\n    return axios.get(`${BASE_URL}search/movie${API_KEY}&query=${query}`)\n }\n export const fetchDetailedById = (id) =>{\n    return axios.get(`${BASE_URL}movie/${id}${API_KEY}`)\n }\n export const fetchReviewsById = (id) =>{\n    return axios.get(`${BASE_URL}movie/${id}/reviews${API_KEY}`)\n }\n export const fetchCastById = (id) =>{\n    return axios.get(`${BASE_URL}movie/${id}/credits${API_KEY}`)\n }","import { useSearchParams, Link, generatePath,useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovieByName } from 'api/getApi';\nimport { PAGE_NAMES } from 'router/paths';\nexport const Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const query = searchParams.get('query');\n  const [status, setStatus] = useState('idle');\n  const location = useLocation();\n  useEffect(() => {\n    if (query === '' || query == null) {return};\n    setStatus('loading');\n    fetchMovieByName(query)\n      .then(({ data }) => {\n        setMovies(data.results);\n        setStatus('fulfilled');\n      })\n      .catch(error => {\n        setStatus('error');\n        console.log(error);\n      })\n      .finally(() => {\n      });\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const userQuery = form.elements.input.value;\n    // Delete extra spaces from user query.\n    const formatedQuery = userQuery\n      .split(' ')\n      .filter(e => e)\n      .join(' ');\n    setSearchParams({ query: formatedQuery });\n    form.reset();\n  };\n\n  if (status === 'error') {\n    return <>Occured an error</>;\n  }\n  return (\n    <>\n      <form type=\"submit\" onSubmit={handleSubmit}>\n        <input\n          name=\"input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          required\n        />\n        <button>Search</button>\n      </form>\n\n      {\n      <section>\n        <ul>\n          {movies.map(({ id, title, original_title }) => {\n            return (\n              <li key={id}>\n                <Link to={generatePath(PAGE_NAMES.id, { id: id })} state={{ from: location }}>\n                  {title ?? original_title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n      }\n      \n    </>\n  );\n};\nexport default Movies;\n"],"names":["BASE_URL","BASE_IMG_URL","API_KEY","fetchTrending","axios","fetchMovieByName","query","fetchDetailedById","id","fetchReviewsById","fetchCastById","Movies","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","get","status","setStatus","location","useLocation","useEffect","then","data","results","catch","error","console","log","finally","type","onSubmit","e","preventDefault","form","currentTarget","formatedQuery","elements","input","value","split","filter","join","reset","name","autoComplete","autoFocus","placeholder","required","map","title","original_title","to","generatePath","PAGE_NAMES","state","from"],"sourceRoot":""}